package person.vadym;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class VulnerabilityScriptServiceTest {

    private final static Integer SCRIPT_ID_1 = 1;
    private final static Integer SCRIPT_ID_2 = 2;
    private final static Integer SCRIPT_ID_3 = 3;
    private final static Integer SCRIPT_ID_4 = 4;
    private final static Integer SCRIPT_ID_5 = 5;

    @Mock
    private VulnerabilityScriptRepository repository;

    @InjectMocks
    private VulnerabilityScriptService instance;

    @Test
    void shouldReturnExecutionPlan() {
        when(repository.findByScriptId(SCRIPT_ID_1)).thenReturn(createScript(SCRIPT_ID_1, SCRIPT_ID_2, SCRIPT_ID_3));
        when(repository.findByScriptIdIn(List.of(SCRIPT_ID_2, SCRIPT_ID_3))).thenReturn(List.of(createScript(SCRIPT_ID_2, SCRIPT_ID_4), createScript(SCRIPT_ID_3, SCRIPT_ID_5)));
        when(repository.findByScriptIdIn(List.of(SCRIPT_ID_4))).thenReturn(List.of(createScript(SCRIPT_ID_4)));
        when(repository.findByScriptIdIn(List.of(SCRIPT_ID_5))).thenReturn(List.of(createScript(SCRIPT_ID_5)));

        List<Integer> executionPlan = instance.getExecutionPlan(SCRIPT_ID_1);

        assertEquals(List.of(5, 3, 4, 2, 1), executionPlan);
    }

    @Test
    void shouldReturnExecutionPlanWithoutDependencies() {
        when(repository.findByScriptId(SCRIPT_ID_1)).thenReturn(createScript(SCRIPT_ID_1));

        List<Integer> executionPlan = instance.getExecutionPlan(SCRIPT_ID_1);

        assertEquals(List.of(1), executionPlan);
    }

    @Test
    void shouldReturnExecutionPlanWithoutDuplicatedDatabaseRequests() {
        when(repository.findByScriptId(SCRIPT_ID_1)).thenReturn(createScript(SCRIPT_ID_1, SCRIPT_ID_2, SCRIPT_ID_3));
        when(repository.findByScriptIdIn(List.of(SCRIPT_ID_2, SCRIPT_ID_3))).thenReturn(List.of(createScript(SCRIPT_ID_2, SCRIPT_ID_4, SCRIPT_ID_5), createScript(SCRIPT_ID_3, SCRIPT_ID_4, SCRIPT_ID_5)));
        when(repository.findByScriptIdIn(List.of(SCRIPT_ID_4, SCRIPT_ID_5))).thenReturn(List.of(createScript(SCRIPT_ID_4), createScript(SCRIPT_ID_5)));

        List<Integer> executionPlan = instance.getExecutionPlan(SCRIPT_ID_1);

        assertEquals(List.of(5, 4, 3, 2, 1), executionPlan);
        verify(repository, times(1)).findByScriptIdIn(List.of(SCRIPT_ID_4, SCRIPT_ID_5));
    }

    private VulnerabilityScript createScript(int scriptId, Integer ... dependencies) {
        return new VulnerabilityScript(scriptId, Arrays.stream(dependencies).collect(Collectors.toList()));
    }
}
